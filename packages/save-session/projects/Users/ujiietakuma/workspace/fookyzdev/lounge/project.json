[{"diskText":";(function(){\n\n  var loginFormElement = $(\"#login_form\");\n  var errorTextElement = loginFormElement.find(\".login_error\");\n  var baseUrl = $(\"body\").data(\"base-url\");\n  var login;\n  var setMessage;\n\n  loginFormElement.bind(\"submit\", function(){\n    login();\n    return false;\n  });\n\n  login = function() {\n    var email = loginFormElement.find(\"input\").eq(0).val();\n    var password = loginFormElement.find(\"input\").eq(1).val();\n    var params = {\n      email: email,\n      password: password\n    }\n    console.log(params)\n    $.ajax({\n      type : \"POST\",\n      url : baseUrl + \"api/login\",\n      dataType : \"json\",\n      data : params,\n      success: function(res) {\n        if(!res.success) {\n          setMessage(res.code);\n        } else {\n          location.href = baseUrl + \"mypage\";\n        }\n      },\n      error: function(error) {\n        console.log(error);\n        alert(\"サーバー側でエラーが発生しました\");\n      }\n    });\n  };\n\n  setMessage = function(code) {\n    if( code == null ) return false;\n    var str;\n    switch(code) {\n      case 403: str = \"メールアドレスまたはパスワードを入力してください\"; break;\n      case 404: str = \"メールアドレスまたはパスワードが間違っています\"; break;\n      default:  str = \"申し訳ありませ、サーバ側でエラーが発生しました\"\n    }\n    errorTextElement.text(str);\n  }\n\n})();\n","text":";(function(){\n\n  var loginFormElement = $(\"#login_form\");\n  var errorTextElement = loginFormElement.find(\".login_error\");\n  var baseUrl = $(\"body\").data(\"base-url\");\n  var login;\n  var setMessage;\n\n  loginFormElement.bind(\"submit\", function(){\n    login();\n    return false;\n  });\n\n  login = function() {\n    var email = loginFormElement.find(\"input\").eq(0).val();\n    var password = loginFormElement.find(\"input\").eq(1).val();\n    var params = {\n      email: email,\n      password: password\n    }\n    console.log(params)\n    $.ajax({\n      type : \"POST\",\n      url : baseUrl + \"api/login\",\n      dataType : \"json\",\n      data : params,\n      success: function(res) {\n        if(!res.success) {\n          setMessage(res.code);\n        } else {\n          location.href = baseUrl + \"mypage\";\n        }\n      },\n      error: function(error) {\n        console.log(error);\n        alert(\"サーバー側でエラーが発生しました\");\n      }\n    });\n  };\n\n  setMessage = function(code) {\n    if( code == null ) return false;\n    var str;\n    switch(code) {\n      case 403: str = \"メールアドレスまたはパスワードを入力してください\"; break;\n      case 404: str = \"メールアドレスまたはパスワードが間違っています\"; break;\n      default:  str = \"申し訳ありませ、サーバ側でエラーが発生しました\"\n    }\n    errorTextElement.text(str);\n  }\n\n})();\n","active":false,"path":"/Users/ujiietakuma/workspace/fookyzdev/lounge/public/assets/js/common/login.js","scroll":2.0714285714285716,"cursor":{"row":24,"column":21}},{"diskText":"<?php\n\nuse Fuel\\Core\\Input;\nuse Fuel\\Core\\Config;\nuse Fuel\\Core\\Crypt;\n\nuse Aws\\S3\\S3Client;\nuse Aws\\S3\\Enum\\CannedAcl;\n\nclass Controller_Api extends Controller_Api_Base {\n\n  public function post_login() {\n    if( empty(Input::post('email')) || empty(Input::post('password'))){\n      return $this->response( [\"success\" => false, \"code\" => 403] );\n    }\n    $user = Model_User::find_one([\n      ['email', '=', Input::post('email')],\n      ['permission', 'IN', Util_Permission::permissions('user')],\n    ]);\n    if(empty($user)) {\n      return $this->response( [\"success\" => false, \"code\" => 404] );\n    }\n    if($user->password === sha1(Input::post('password'))) {\n      Session::set('current_user_id', $user->id);\n      Cookie::set('user', json_encode([\n        'id'           => $user->id,\n        'access_token' => $user->access_token(),\n      ]));\n      return $this->response( [\"success\" => true, \"code\" => 200] );\n    } else {\n      return $this->response( [\"success\" => false, \"code\" => 404] );\n    }\n  }\n\n  public function get_stations() {\n    $search_param = self::gen_station_param(Input::get());\n    $url = \"http://express.heartrails.com/api/json?method=getStations&{$search_param}\";\n    $result = self::get_contents($url);\n    if( !empty($result->response->error) || empty($result) ){\n      return $this->response( self::build_objects([], \"station\") );\n    }\n    return $this->response( self::build_objects($result->response->station, \"station\") );\n  }\n\n  public static function gen_station_param($input) {\n    $value = urlencode(Input::get(\"value\", \"\"));\n    switch (Input::get(\"key\", \"\")) {\n      case 'station_name': return \"name={$value}\";\n      case 'line_name':    return \"line={$value}\";\n      default:             return \"name={$value}\";\n    }\n  }\n\n  public function get_latlng() {\n    $address = urlencode(Input::get(\"address\", \"\"));\n    $url = \"http://www.geocoding.jp/api/?v=3.0&q={$address}\";\n    $result = self::get_contents($url, \"xml\");\n    if( !empty($result->error) || empty($result) ){\n      return $this->response( self::build_objects([], \"latlng\") );\n    }\n    return $this->response( self::build_object($result, \"latlng\") );\n  }\n\n  public function get_request_branch() {\n    return $this->response( Lang::get(\"request.branch\"));\n  }\n\n  public function post_uploder() {\n    $ckeditor_func_num = Input::get(\"CKEditorFuncNum\");\n    $file = $this->upload();\n    if( empty($file) ){ return true; }\n    $output = '<html><body><script type=\"text/javascript\">window.parent.CKEDITOR.tools.callFunction('.$ckeditor_func_num.', \"'.$file.'\");</script></body></html>';\n    echo $output;\n  }\n\n  public function get_access_token() {\n    $this->set_current_user();\n    if(empty($this->current_user)) {\n      return $this->response(self::build_response(null));\n    }\n    return $this->response(self::build_response(['access_key' => $this->current_user->access_token()]));\n  }\n\n  public function post_check_access_token() {\n    $client_key = Input::post('client_key');\n    $api_key = Input::post('api_key');\n    if(empty($client_key) || $this->check_api_key($api_key)) {\n      return $this->response(self::build_response([]));\n    }\n    return $this->response(self::build_response([\n      'user' => Model_User::find_one(['email', '=', Crypt::decode($client_key)]),\n    ]));\n  }\n\n  private function upload() {\n    Upload::process();\n    if(Upload::is_valid()) {\n      Upload::save();\n      $tmp_file = Upload::get_files()[0];\n      $upload_file = $this->upload_s3($tmp_file);\n      if( $upload_file ){\n        return $upload_file;\n      } else {\n        return false;\n      }\n    }\n    return [];\n  }\n\n  #################################################\n  #               Private Functions               #\n  #################################################\n  private $_s3 = null;\n\n  private function upload_s3($tmp_file) {\n\n    $result = $this->s3()->putObject([\n      'Bucket'       => Config::get('aws.s3.blog_bucket'),\n      'Key'          => $this->gen_s3_path($tmp_file),\n      'SourceFile'   => Arr::get($tmp_file, 'saved_to').Arr::get($tmp_file, 'saved_as'),\n      'ACL'          => CannedAcl::PUBLIC_READ,\n      'StorageClass' => 'REDUCED_REDUNDANCY',\n      'CacheControl' => Config::get('aws.s3.cache_control'),\n    ]);\n    return ! empty(Arr::get($result, 'ObjectURL')) ? Arr::get($result, 'ObjectURL') : false ;\n  }\n\n  private function gen_s3_path($tmp_file) {\n    $now = time();\n    $y = date('Y', $now);\n    $m = date('m', $now);\n    $d = date('d', $now);\n    return \"files/{$y}/{$m}/{$d}/\".Arr::get($tmp_file, 'saved_as');\n  }\n\n  private function s3() {\n    if(empty($this->_s3)) {\n      $this->_s3 = S3Client::factory([\n        'key'     => Config::get('aws.access_key'),\n        'secret'  => Config::get('aws.secret_key'),\n        'region'  => Config::get('aws.s3.region'),\n      ]);\n    }\n    return $this->_s3;\n  }\n\n}\n","text":"<?php\n\nuse Fuel\\Core\\Input;\nuse Fuel\\Core\\Config;\nuse Fuel\\Core\\Crypt;\n\nuse Aws\\S3\\S3Client;\nuse Aws\\S3\\Enum\\CannedAcl;\n\nclass Controller_Api extends Controller_Api_Base {\n\n  public function post_login() {\n    if( empty(Input::post('email')) || empty(Input::post('password'))){\n      return $this->response( [\"success\" => false, \"code\" => 403] );\n    }\n    $user = Model_User::find_one([\n      ['email', '=', Input::post('email')],\n      ['permission', 'IN', Util_Permission::permissions('user')],\n    ]);\n    if(empty($user)) {\n      return $this->response( [\"success\" => false, \"code\" => 404] );\n    }\n    if($user->password === sha1(Input::post('password'))) {\n      Session::set('current_user_id', $user->id);\n      Cookie::set('user', json_encode([\n        'id'           => $user->id,\n        'access_token' => $user->access_token(),\n      ]));\n      return $this->response( [\"success\" => true, \"code\" => 200] );\n    } else {\n      return $this->response( [\"success\" => false, \"code\" => 404] );\n    }\n  }\n\n  public function get_stations() {\n    $search_param = self::gen_station_param(Input::get());\n    $url = \"http://express.heartrails.com/api/json?method=getStations&{$search_param}\";\n    $result = self::get_contents($url);\n    if( !empty($result->response->error) || empty($result) ){\n      return $this->response( self::build_objects([], \"station\") );\n    }\n    return $this->response( self::build_objects($result->response->station, \"station\") );\n  }\n\n  public static function gen_station_param($input) {\n    $value = urlencode(Input::get(\"value\", \"\"));\n    switch (Input::get(\"key\", \"\")) {\n      case 'station_name': return \"name={$value}\";\n      case 'line_name':    return \"line={$value}\";\n      default:             return \"name={$value}\";\n    }\n  }\n\n  public function get_latlng() {\n    $address = urlencode(Input::get(\"address\", \"\"));\n    $url = \"http://www.geocoding.jp/api/?v=3.0&q={$address}\";\n    $result = self::get_contents($url, \"xml\");\n    if( !empty($result->error) || empty($result) ){\n      return $this->response( self::build_objects([], \"latlng\") );\n    }\n    return $this->response( self::build_object($result, \"latlng\") );\n  }\n\n  public function get_request_branch() {\n    return $this->response( Lang::get(\"request.branch\"));\n  }\n\n  public function post_uploder() {\n    $ckeditor_func_num = Input::get(\"CKEditorFuncNum\");\n    $file = $this->upload();\n    if( empty($file) ){ return true; }\n    $output = '<html><body><script type=\"text/javascript\">window.parent.CKEDITOR.tools.callFunction('.$ckeditor_func_num.', \"'.$file.'\");</script></body></html>';\n    echo $output;\n  }\n\n  public function get_access_token() {\n    $this->set_current_user();\n    if(empty($this->current_user)) {\n      return $this->response(self::build_response(null));\n    }\n    return $this->response(self::build_response(['access_key' => $this->current_user->access_token()]));\n  }\n\n  public function post_check_access_token() {\n    $client_key = Input::post('client_key');\n    $api_key = Input::post('api_key');\n    if(empty($client_key) || $this->check_api_key($api_key)) {\n      return $this->response(self::build_response([]));\n    }\n    return $this->response(self::build_response([\n      'user' => Model_User::find_one(['email', '=', Crypt::decode($client_key)]),\n    ]));\n  }\n\n  private function upload() {\n    Upload::process();\n    if(Upload::is_valid()) {\n      Upload::save();\n      $tmp_file = Upload::get_files()[0];\n      $upload_file = $this->upload_s3($tmp_file);\n      if( $upload_file ){\n        return $upload_file;\n      } else {\n        return false;\n      }\n    }\n    return [];\n  }\n\n  #################################################\n  #               Private Functions               #\n  #################################################\n  private $_s3 = null;\n\n  private function upload_s3($tmp_file) {\n\n    $result = $this->s3()->putObject([\n      'Bucket'       => Config::get('aws.s3.blog_bucket'),\n      'Key'          => $this->gen_s3_path($tmp_file),\n      'SourceFile'   => Arr::get($tmp_file, 'saved_to').Arr::get($tmp_file, 'saved_as'),\n      'ACL'          => CannedAcl::PUBLIC_READ,\n      'StorageClass' => 'REDUCED_REDUNDANCY',\n      'CacheControl' => Config::get('aws.s3.cache_control'),\n    ]);\n    return ! empty(Arr::get($result, 'ObjectURL')) ? Arr::get($result, 'ObjectURL') : false ;\n  }\n\n  private function gen_s3_path($tmp_file) {\n    $now = time();\n    $y = date('Y', $now);\n    $m = date('m', $now);\n    $d = date('d', $now);\n    return \"files/{$y}/{$m}/{$d}/\".Arr::get($tmp_file, 'saved_as');\n  }\n\n  private function s3() {\n    if(empty($this->_s3)) {\n      $this->_s3 = S3Client::factory([\n        'key'     => Config::get('aws.access_key'),\n        'secret'  => Config::get('aws.secret_key'),\n        'region'  => Config::get('aws.s3.region'),\n      ]);\n    }\n    return $this->_s3;\n  }\n\n}\n","active":false,"path":"/Users/ujiietakuma/workspace/fookyzdev/lounge/fuel/app/classes/controller/api.php","scroll":2.0575263662511984,"cursor":{"row":25,"column":36}},{"diskText":"<?php\n\nuse Fuel\\Core\\Cookie;\nuse Fuel\\Core\\Input;\nuse Fuel\\Core\\Response;\nuse Fuel\\Core\\Session;\nuse Parser\\View_HamlTwig;\n\nuse Aws\\S3\\S3Client;\n\nclass Controller_User_Mypage extends Controller_User_Base {\n\n  public function action_index() {\n    if( ! $this->check_permission($this->_permission_type)) { Response::redirect('/'); }\n    $data = [];\n    $this->template->content = View_HamlTwig::forge($this->sp.'user/mypage/index.mthaml', $data);\n  }\n\n  public function action_show() {\n    $data = [];\n    $this->template->content = View_HamlTwig::forge('user/mypage/show.mthaml', $data);\n  }\n\n\n  #####################################\n  #               Edit                #\n  #####################################\n  public function action_edit() {\n    $user = $this->current_user;\n    $post = Input::post();\n    if( ! empty($post) ){\n      $upload_process = $this->upload_process();\n      $is_upload = $this->icon_upload( $upload_process );\n      if( $is_upload ){\n        $post[\"user\"][\"icon_filename\"] = reset($upload_process)[\"saved_as\"];\n      }\n      $user = Model_User::user_update($post, $user->id, 'edit');\n    }\n    $data = [\n      'user' => $user,\n    ];\n    $this->template->content = View_HamlTwig::forge($this->sp.'user/mypage/edit.mthaml', $data);\n  }\n\n  public function action_info() {\n    $user = $this->current_user;\n    if( ! empty(Input::post()) ){\n      $user = Model_User::user_update(Input::post(), $user->id, 'info');\n    }\n    $data = [\n      'user' => $user,\n    ];\n    $this->template->content = View_HamlTwig::forge($this->sp.'user/mypage/info.mthaml', $data);\n  }\n\n\n  #######################################################\n  #                  icon upload\n  #######################################################\n  public function s3() {\n    return S3Client::factory([\n      'key'     => Config::get('aws.access_key'),\n      'secret'  => Config::get('aws.secret_key'),\n      'region'  => Config::get('aws.s3.region'),\n    ]);\n  }\n\n  public function upload_process() {\n    if(empty(Input::file()) || empty($this->current_user)) {\n      return false;\n    }\n    Upload::process();\n    if(Upload::is_valid()) {\n      Upload::save();\n      return Upload::get_files();\n    }\n    return false;\n  }\n\n  public function icon_upload($tmp_file) {\n    if( empty($tmp_file) ){ return null; }\n    $tmp_file = reset($tmp_file);\n    $saved_as = Arr::get($tmp_file, 'saved_as');\n    $saved_to = Arr::get($tmp_file, 'saved_to');\n    $path = \"{$saved_to}{$saved_as}\";\n    Image::load($path)\n      ->crop_resize(200, 200)\n      ->save($path);\n\n    $result = $this->s3()->putObject([\n      'Bucket'       => Config::get('aws.s3.bucket'),\n      'Key'          => \"user/icon/{$saved_as}\",\n      'SourceFile'   => Arr::get($tmp_file, 'saved_to').$saved_as,\n      'ACL'          => 'private',\n      'StorageClass' => 'REDUCED_REDUNDANCY',\n      'CacheControl' => Config::get('aws.s3.cache_control'),\n    ]);\n    $result = ! empty(Arr::get($result, 'ObjectURL'));\n    if( !$result ){ return false; }\n    \\Fuel\\Core\\File::delete($path);\n    return $result;\n  }\n\n  public function show_edit($user) {\n    $data = [\n      'user' => $user,\n    ];\n    $this->template->content = View_HamlTwig::forge('admin/users/edit.mthaml', $data);\n  }\n\n  public function action_login() {\n    if( ! empty(Input::post('user.email')) && ! empty(Input::post('user.password'))){\n      $user = Model_User::find_one([\n        ['email', '=', Input::post('user.email')],\n        ['permission', 'IN', Util_Permission::permissions($this->_permission_type)],\n      ]);\n      if(empty($user)) {\n        Response::redirect('/');\n      }\n      if($user->password === sha1(Input::post('user.password'))) {\n        Session::set('current_user_id', $user->id);\n//        Cookie::set('access_token', $user->access_token());\n        Cookie::set('user', json_encode([\n          'id'           => $user->id,\n          'access_token' => $user->access_token(),\n        ]));\n        Response::redirect('mypage/');\n      }\n    }\n    Response::redirect('/');\n  }\n\n  public function action_logout() {\n    Session::destroy();\n    Response::redirect('/');\n  }\n}\n","text":"<?php\n\nuse Fuel\\Core\\Cookie;\nuse Fuel\\Core\\Input;\nuse Fuel\\Core\\Response;\nuse Fuel\\Core\\Session;\nuse Parser\\View_HamlTwig;\n\nuse Aws\\S3\\S3Client;\n\nclass Controller_User_Mypage extends Controller_User_Base {\n\n  public function action_index() {\n    if( ! $this->check_permission($this->_permission_type)) { Response::redirect('/'); }\n    $data = [];\n    $this->template->content = View_HamlTwig::forge($this->sp.'user/mypage/index.mthaml', $data);\n  }\n\n  public function action_show() {\n    $data = [];\n    $this->template->content = View_HamlTwig::forge('user/mypage/show.mthaml', $data);\n  }\n\n\n  #####################################\n  #               Edit                #\n  #####################################\n  public function action_edit() {\n    $user = $this->current_user;\n    $post = Input::post();\n    if( ! empty($post) ){\n      $upload_process = $this->upload_process();\n      $is_upload = $this->icon_upload( $upload_process );\n      if( $is_upload ){\n        $post[\"user\"][\"icon_filename\"] = reset($upload_process)[\"saved_as\"];\n      }\n      $user = Model_User::user_update($post, $user->id, 'edit');\n    }\n    $data = [\n      'user' => $user,\n    ];\n    $this->template->content = View_HamlTwig::forge($this->sp.'user/mypage/edit.mthaml', $data);\n  }\n\n  public function action_info() {\n    $user = $this->current_user;\n    if( ! empty(Input::post()) ){\n      $user = Model_User::user_update(Input::post(), $user->id, 'info');\n    }\n    $data = [\n      'user' => $user,\n    ];\n    $this->template->content = View_HamlTwig::forge($this->sp.'user/mypage/info.mthaml', $data);\n  }\n\n\n  #######################################################\n  #                  icon upload\n  #######################################################\n  public function s3() {\n    return S3Client::factory([\n      'key'     => Config::get('aws.access_key'),\n      'secret'  => Config::get('aws.secret_key'),\n      'region'  => Config::get('aws.s3.region'),\n    ]);\n  }\n\n  public function upload_process() {\n    if(empty(Input::file()) || empty($this->current_user)) {\n      return false;\n    }\n    Upload::process();\n    if(Upload::is_valid()) {\n      Upload::save();\n      return Upload::get_files();\n    }\n    return false;\n  }\n\n  public function icon_upload($tmp_file) {\n    if( empty($tmp_file) ){ return null; }\n    $tmp_file = reset($tmp_file);\n    $saved_as = Arr::get($tmp_file, 'saved_as');\n    $saved_to = Arr::get($tmp_file, 'saved_to');\n    $path = \"{$saved_to}{$saved_as}\";\n    Image::load($path)\n      ->crop_resize(200, 200)\n      ->save($path);\n\n    $result = $this->s3()->putObject([\n      'Bucket'       => Config::get('aws.s3.bucket'),\n      'Key'          => \"user/icon/{$saved_as}\",\n      'SourceFile'   => Arr::get($tmp_file, 'saved_to').$saved_as,\n      'ACL'          => 'private',\n      'StorageClass' => 'REDUCED_REDUNDANCY',\n      'CacheControl' => Config::get('aws.s3.cache_control'),\n    ]);\n    $result = ! empty(Arr::get($result, 'ObjectURL'));\n    if( !$result ){ return false; }\n    \\Fuel\\Core\\File::delete($path);\n    return $result;\n  }\n\n  public function show_edit($user) {\n    $data = [\n      'user' => $user,\n    ];\n    $this->template->content = View_HamlTwig::forge('admin/users/edit.mthaml', $data);\n  }\n\n  public function action_login() {\n    if( ! empty(Input::post('user.email')) && ! empty(Input::post('user.password'))){\n      $user = Model_User::find_one([\n        ['email', '=', Input::post('user.email')],\n        ['permission', 'IN', Util_Permission::permissions($this->_permission_type)],\n      ]);\n      if(empty($user)) {\n        Response::redirect('/');\n      }\n      if($user->password === sha1(Input::post('user.password'))) {\n        Session::set('current_user_id', $user->id);\n//        Cookie::set('access_token', $user->access_token());\n        Cookie::set('user', json_encode([\n          'id'           => $user->id,\n          'access_token' => $user->access_token(),\n        ]));\n        Response::redirect('mypage/');\n      }\n    }\n    Response::redirect('/');\n  }\n\n  public function action_logout() {\n    Session::destroy();\n    Response::redirect('/');\n  }\n}\n","active":false,"path":"/Users/ujiietakuma/workspace/fookyzdev/lounge/fuel/app/classes/controller/user/mypage.php","scroll":87.92857142857143,"cursor":{"row":111,"column":4}},{"diskText":"<?php\n\nuse Fuel\\Core\\Arr;\nuse Fuel\\Core\\Controller_Template;\nuse Fuel\\Core\\Inflector;\nuse Fuel\\Core\\Input;\nuse Fuel\\Core\\Response;\nuse Fuel\\Core\\Upload;\nuse Fuel\\Core\\Uri;\n\nclass Controller_Base extends Controller_Template {\n\n  protected $_js = [];\n  protected $_css = [];\n\n  protected $current_user = null;\n\n  public function before() {\n    $seo = Util_Seo::forge(Uri::segments());\n    $this->template->title       = $seo->_title;\n    $this->template->keyword     = $seo->_keyword;\n    $this->template->description = $seo->_description;\n    $this->template->header->h1  = $seo->_h1;\n    parent::before();\n  }\n\n  public function after($response) {\n    if( ! empty($this->template)) {\n      $this->template->js = $this->_js;\n      $this->template->css = $this->_css;\n      $this->template->header->nav_class = $this->get_nav_class();      \n    }\n    return parent::after($response);\n  }\n\n  protected function pagination($res = null) {\n    if( empty($res) ){ return null; }\n    if( empty($res->results_available) ){ return null; }\n    // $res->results_available 合計\n    // $res->results_start     オフセット\n    $prev_link = [];\n    $next_link = [];\n    $link_num = 5;\n    $limit = 10;\n    $page = empty(Input::get(\"p\", 1)) ? 1 : (int)Input::get(\"p\", 1);\n    $current_url = Uri::update_query_string([\"p\" => $page]);\n    $current_li = \"<li class='active'><a href='{$current_url}'>{$page}</a></li>\";\n    for ($p=$page - 1; $p >= $page - $link_num; $p--) {\n      if( $p <= 0 ){ break; }\n      $prev_link[$p] = Uri::update_query_string([\"p\" => $p]);\n    }\n    if( !empty($prev_link) ){\n      $prev_link[\"Prev\"] = Uri::update_query_string([\"p\" => $page-1]);\n    }\n    for ($n=$page + 1; $n <= $page + $link_num; $n++) {\n      $difference = ($n * $limit) - (int)$res->results_available;\n      if( $difference >= $limit ){ break; }\n      $next_link[$n] = Uri::update_query_string([\"p\" => $n]);\n    }\n    if( !empty($next_link) ){\n      $next_link[\"Next\"] = Uri::update_query_string([\"p\" => $page+1]);\n    }\n    return $this->gen_pagination_html($current_li, $prev_link, $next_link);\n  }\n\n  private function gen_pagination_html($current_li = \"\", $prev_link = [], $next_link = []) {\n    $prev_html = \"\";\n    $next_html = \"\";\n    foreach (array_reverse($prev_link, true) as $num => $link) {\n      $prev_html .= \"<li><a href='{$link}'>{$num}</a></li>\";\n    }\n    foreach ($next_link as $num => $link) {\n      $next_html .= \"<li><a href='{$link}'>{$num}</a></li>\";\n    }\n    return \"<ul class='pagination'>{$prev_html}{$current_li}{$next_html}</ul>\";\n  }\n\n  protected function find_page($table_name, $where = []) {\n    $model = \"Model_\".Inflector::classify($table_name);\n    $conditions = call_user_func($model.\"::condition_to_where\", $where);\n    $pagination = Pagination::forge('default', $this->page_config($model, $conditions));\n    return [\n      'data' => call_user_func_array($model.\"::find\", ['all', array_merge($conditions, [\n        'limit'     => $pagination->per_page,\n        'offset'    => $pagination->offset,\n      ])]),\n      'pagination' => $pagination,\n    ];\n  }\n\n  protected function page_config($model, $conditions = []) {\n    return [\n      'total_items'    => call_user_func($model.\"::count\", $conditions),\n      'per_page'       => call_user_func($model.\"::per_page\"),\n      'uri_segment'    => 'page',\n    ];\n  }\n\n  #################################\n  #          js 関連\n  #################################\n  /**\n   * setされているjs一覧\n   * @return array\n   */\n  protected function get_js() {\n    return $this->_js;\n  }\n\n  /**\n   * jsをset(引数可変)\n   * @return boolean\n   */\n  protected function set_js() {\n    $args = func_get_args();\n    if(empty($args)) { return false; }\n    $this->_js = array_merge($this->_js, $args);\n    return true;\n  }\n\n  /**\n   * jsをdelete(引数可変)\n   * @return boolean\n   */\n  protected function del_js() {\n    $args = func_get_args();\n    if(empty($args)) { return false; }\n    foreach($args as $js) {\n      if(empty($this->_js[$js])) { continue; }\n      unset($this->_js[$js]);\n    }\n  }\n\n  protected function file_upload() {\n    if(empty(Input::file()) || empty($this->current_user)) {\n      return [];\n    }\n    Upload::process();\n    if(Upload::is_valid()) {\n      Upload::save();\n      return Model_File::bulk_add(Upload::get_files(), $this->current_user);\n    } \n    return [];\n  }\n\n  #################################\n  #          css 関連\n  #################################\n  protected function get_css() {\n    return $this->_css;\n  }\n\n  protected function set_css() {\n    $args = func_get_args();\n    if(empty($args)) { return false; }\n    $this->_css = array_merge($this->_css, $args);\n    return true;\n  }\n\n  protected function del_css() {\n    $args = func_get_args();\n    if(empty($args)) { return false; }\n    foreach($args as $css) {\n      if(empty($this->_css[$css])) { continue; }\n      unset($this->_css[$css]);\n    }\n  }\n\n  protected function set_current_user() {\n    $current_user_id = Session::get('current_user_id');\n    if( ! empty($current_user_id)) {\n      $this->current_user = Model_User::find_one($current_user_id);\n    }\n  }\n\n  protected function check_session() {\n    return ! empty(Session::get('current_user_id'));\n  }\n\n  protected function check_permission($type) {\n    if($type == 'read') { return true; }\n    if(empty($this->current_user)) { return false; }\n    return $this->current_user->have_permission($type);\n  }\n\n  protected function email_to_admin($type, $options = []) {\n    $admins = Model_User::find_all_by_permission('admin');\n    $to_admin = array_shift($admins);\n    if( ! empty($to_admin)) {\n      $request_email = Util_Email::forge($to_admin, $type, $options);\n      foreach ($admins as $admin) {\n        $request_email->add_bcc($admin->email);\n      }\n      $request_email->send();\n    }\n  }\n\n  protected function get_nav_class() {\n    $is_type02 = array_search(Uri::segments(), $this->_nav02);\n    return $is_type02 || $is_type02 === 0 ? \"nav-type-02\" : \"nav-type-01\" ;\n  }\n\n  protected function check_login() {\n    if(empty($this->current_user) || ! $this->check_permission($this->_permission_type)) {\n      return Response::redirect(\"{$this->_permission_type}/login\");\n    }\n  }\n}\n","text":"<?php\n\nuse Fuel\\Core\\Arr;\nuse Fuel\\Core\\Controller_Template;\nuse Fuel\\Core\\Inflector;\nuse Fuel\\Core\\Input;\nuse Fuel\\Core\\Response;\nuse Fuel\\Core\\Upload;\nuse Fuel\\Core\\Uri;\n\nclass Controller_Base extends Controller_Template {\n\n  protected $_js = [];\n  protected $_css = [];\n\n  protected $current_user = null;\n\n  public function before() {\n    $seo = Util_Seo::forge(Uri::segments());\n    $this->template->title       = $seo->_title;\n    $this->template->keyword     = $seo->_keyword;\n    $this->template->description = $seo->_description;\n    $this->template->header->h1  = $seo->_h1;\n    parent::before();\n  }\n\n  public function after($response) {\n    if( ! empty($this->template)) {\n      $this->template->js = $this->_js;\n      $this->template->css = $this->_css;\n      $this->template->header->nav_class = $this->get_nav_class();      \n    }\n    return parent::after($response);\n  }\n\n  protected function pagination($res = null) {\n    if( empty($res) ){ return null; }\n    if( empty($res->results_available) ){ return null; }\n    // $res->results_available 合計\n    // $res->results_start     オフセット\n    $prev_link = [];\n    $next_link = [];\n    $link_num = 5;\n    $limit = 10;\n    $page = empty(Input::get(\"p\", 1)) ? 1 : (int)Input::get(\"p\", 1);\n    $current_url = Uri::update_query_string([\"p\" => $page]);\n    $current_li = \"<li class='active'><a href='{$current_url}'>{$page}</a></li>\";\n    for ($p=$page - 1; $p >= $page - $link_num; $p--) {\n      if( $p <= 0 ){ break; }\n      $prev_link[$p] = Uri::update_query_string([\"p\" => $p]);\n    }\n    if( !empty($prev_link) ){\n      $prev_link[\"Prev\"] = Uri::update_query_string([\"p\" => $page-1]);\n    }\n    for ($n=$page + 1; $n <= $page + $link_num; $n++) {\n      $difference = ($n * $limit) - (int)$res->results_available;\n      if( $difference >= $limit ){ break; }\n      $next_link[$n] = Uri::update_query_string([\"p\" => $n]);\n    }\n    if( !empty($next_link) ){\n      $next_link[\"Next\"] = Uri::update_query_string([\"p\" => $page+1]);\n    }\n    return $this->gen_pagination_html($current_li, $prev_link, $next_link);\n  }\n\n  private function gen_pagination_html($current_li = \"\", $prev_link = [], $next_link = []) {\n    $prev_html = \"\";\n    $next_html = \"\";\n    foreach (array_reverse($prev_link, true) as $num => $link) {\n      $prev_html .= \"<li><a href='{$link}'>{$num}</a></li>\";\n    }\n    foreach ($next_link as $num => $link) {\n      $next_html .= \"<li><a href='{$link}'>{$num}</a></li>\";\n    }\n    return \"<ul class='pagination'>{$prev_html}{$current_li}{$next_html}</ul>\";\n  }\n\n  protected function find_page($table_name, $where = []) {\n    $model = \"Model_\".Inflector::classify($table_name);\n    $conditions = call_user_func($model.\"::condition_to_where\", $where);\n    $pagination = Pagination::forge('default', $this->page_config($model, $conditions));\n    return [\n      'data' => call_user_func_array($model.\"::find\", ['all', array_merge($conditions, [\n        'limit'     => $pagination->per_page,\n        'offset'    => $pagination->offset,\n      ])]),\n      'pagination' => $pagination,\n    ];\n  }\n\n  protected function page_config($model, $conditions = []) {\n    return [\n      'total_items'    => call_user_func($model.\"::count\", $conditions),\n      'per_page'       => call_user_func($model.\"::per_page\"),\n      'uri_segment'    => 'page',\n    ];\n  }\n\n  #################################\n  #          js 関連\n  #################################\n  /**\n   * setされているjs一覧\n   * @return array\n   */\n  protected function get_js() {\n    return $this->_js;\n  }\n\n  /**\n   * jsをset(引数可変)\n   * @return boolean\n   */\n  protected function set_js() {\n    $args = func_get_args();\n    if(empty($args)) { return false; }\n    $this->_js = array_merge($this->_js, $args);\n    return true;\n  }\n\n  /**\n   * jsをdelete(引数可変)\n   * @return boolean\n   */\n  protected function del_js() {\n    $args = func_get_args();\n    if(empty($args)) { return false; }\n    foreach($args as $js) {\n      if(empty($this->_js[$js])) { continue; }\n      unset($this->_js[$js]);\n    }\n  }\n\n  protected function file_upload() {\n    if(empty(Input::file()) || empty($this->current_user)) {\n      return [];\n    }\n    Upload::process();\n    if(Upload::is_valid()) {\n      Upload::save();\n      return Model_File::bulk_add(Upload::get_files(), $this->current_user);\n    } \n    return [];\n  }\n\n  #################################\n  #          css 関連\n  #################################\n  protected function get_css() {\n    return $this->_css;\n  }\n\n  protected function set_css() {\n    $args = func_get_args();\n    if(empty($args)) { return false; }\n    $this->_css = array_merge($this->_css, $args);\n    return true;\n  }\n\n  protected function del_css() {\n    $args = func_get_args();\n    if(empty($args)) { return false; }\n    foreach($args as $css) {\n      if(empty($this->_css[$css])) { continue; }\n      unset($this->_css[$css]);\n    }\n  }\n\n  protected function set_current_user() {\n    $current_user_id = Session::get('current_user_id');\n    if( ! empty($current_user_id)) {\n      $this->current_user = Model_User::find_one($current_user_id);\n    }\n  }\n\n  protected function check_session() {\n    return ! empty(Session::get('current_user_id'));\n  }\n\n  protected function check_permission($type) {\n    if($type == 'read') { return true; }\n    if(empty($this->current_user)) { return false; }\n    return $this->current_user->have_permission($type);\n  }\n\n  protected function email_to_admin($type, $options = []) {\n    $admins = Model_User::find_all_by_permission('admin');\n    $to_admin = array_shift($admins);\n    if( ! empty($to_admin)) {\n      $request_email = Util_Email::forge($to_admin, $type, $options);\n      foreach ($admins as $admin) {\n        $request_email->add_bcc($admin->email);\n      }\n      $request_email->send();\n    }\n  }\n\n  protected function get_nav_class() {\n    $is_type02 = array_search(Uri::segments(), $this->_nav02);\n    return $is_type02 || $is_type02 === 0 ? \"nav-type-02\" : \"nav-type-01\" ;\n  }\n\n  protected function check_login() {\n    if(empty($this->current_user) || ! $this->check_permission($this->_permission_type)) {\n      return Response::redirect(\"{$this->_permission_type}/login\");\n    }\n  }\n}\n","active":false,"path":"/Users/ujiietakuma/workspace/fookyzdev/lounge/fuel/app/classes/controller/base.php","scroll":70.07142857142857,"cursor":{"row":19,"column":22}},{"diskText":"{% haml %}\n\n#modal-signin.modal.fade(aria-hidden= \"true\" aria-labelledby = \"modal-signin\" role= \"dialog\" tabindex= \"-1\")\n  .modal-dialog.modal-sm\n    .modal-content\n      = form_open({action: 'mypage/login', id: \"login_form\"})\n      .modal-header\n        %button.close(aria-hidden= \"true\" data-dismiss= \"modal\" type= \"button\")\n          %i.fa.fa-times\n        %h4.modal-title ログイン\n        .login_error\n      .modal-body\n        .form-group\n          = form_label('メールアドレス', 'user[email]')\n          = form_input('user[email]', '', {placeholder: \"メールアドレスを入力\", class: \"form-control input-lg\"})\n\n        .form-group\n          = form_label('パスワード', 'user[password]')\n          = form_password('user[password]', '', {placeholder: \"パスワードを入力\", class: \"form-control input-lg\"})\n        /\n          .checkbox\n            %label\n              %input{:name => \"forget\", :type => \"checkbox\"}/\n              ログイン状態を維持する\n      .modal-footer\n        %p\n          初めて利用する方は\n          = html_anchor('requests/rent', 'リクエストして開始', {})\n\n        = form_submit('submit-btn', 'ログイン', {class: 'btn btn-success btn-block btn-lg'})\n        -#= html_anchor('mypage', 'ログイン', {class: 'btn btn-success btn-block btn-lg'})\n\n      = form_close()\n","text":"{% haml %}\n\n#modal-signin.modal.fade(aria-hidden= \"true\" aria-labelledby = \"modal-signin\" role= \"dialog\" tabindex= \"-1\")\n  .modal-dialog.modal-sm\n    .modal-content\n      = form_open({action: 'mypage/login', id: \"login_form\"})\n      .modal-header\n        %button.close(aria-hidden= \"true\" data-dismiss= \"modal\" type= \"button\")\n          %i.fa.fa-times\n        %h4.modal-title ログイン\n        .login_error\n      .modal-body\n        .form-group\n          = form_label('メールアドレス', 'user[email]')\n          = form_input('user[email]', '', {placeholder: \"メールアドレスを入力\", class: \"form-control input-lg\"})\n\n        .form-group\n          = form_label('パスワード', 'user[password]')\n          = form_password('user[password]', '', {placeholder: \"パスワードを入力\", class: \"form-control input-lg\"})\n        /\n          .checkbox\n            %label\n              %input{:name => \"forget\", :type => \"checkbox\"}/\n              ログイン状態を維持する\n      .modal-footer\n        %p\n          初めて利用する方は\n          = html_anchor('requests/rent', 'リクエストして開始', {})\n\n        = form_submit('submit-btn', 'ログイン', {class: 'btn btn-success btn-block btn-lg'})\n        -#= html_anchor('mypage', 'ログイン', {class: 'btn btn-success btn-block btn-lg'})\n\n      = form_close()\n","active":false,"path":"/Users/ujiietakuma/workspace/fookyzdev/lounge/fuel/app/views/layouts/modal/_signin.mthaml","scroll":2.071428571428571,"cursor":{"row":13,"column":48}}]